{"version":3,"sources":["components/Map/marker.js","components/Map/popupContent.js","components/Map/index.js","components/ReportIssue/index.js","components/Report/index.js","App.js","serviceWorker.js","index.js"],"names":["pinStyle","cursor","stroke","MarkerComponent","this","props","size","onClick","height","viewBox","style","cx","cy","r","fill","positive","PureComponent","PointInfo","info","type","Map","state","viewport","width","latitude","longitude","zoom","popupInfo","_onViewportChange","setState","markerClick","_renderMarker","point","index","key","id","coordinates","tipSize","anchor","closeOnClick","onClose","mapboxApiAccessToken","mapStyle","onViewportChange","points","map","_renderPopup","Component","ReportIssue","className","position","clickHandler","backgroundColor","color","customStyles","container","provided","Report","selectedProblemValue","error","locating","handleSelect","select","value","success","coords","problem","userId","localStorage","getItem","undefined","fetch","method","headers","body","JSON","stringify","lng","lat","parseInt","then","res","json","setItem","getMapPoints","handleClose","handleSubmit","navigator","geolocation","getCurrentPosition","getOptions","options","option","label","text","active","styles","onChange","disabled","fromJS","version","sources","data","features","geometry","layers","source","paint","App","reportOpened","problemOptions","positiveOptions","loadingPoints","reportProblem","getProblemTypes","console","log","filter","item","toggleReport","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.107327c4.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nconst pinStyle = {\n  cursor: \"pointer\",\n  stroke: \"none\"\n};\n\nexport default class MarkerComponent extends PureComponent {\n  render() {\n    const { size = 20, onClick } = this.props;\n\n    return (\n      <svg\n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{\n          ...pinStyle\n        }}\n        onClick={onClick}\n      >\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={size / 2}\n          stroke=\"none\"\n          fill={`${\n            this.props.positive\n              ? \"rgba(72, 175, 8, 0.5)\"\n              : \"rgba(255, 0, 0, 0.5)\"\n          }`}\n        />\n      </svg>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nexport default class PointInfo extends PureComponent {\n  render() {\n    const { info } = this.props;\n\n    return <div>{info.type}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport MarkerComponent from \"./marker\";\nimport PointInfo from \"./popupContent\";\n\nexport default class Map extends Component {\n  state = {\n    viewport: {\n      width: \"100%\",\n      height: \"100%\",\n      latitude: 49.989698,\n      longitude: 36.221784,\n      zoom: 15\n    },\n    popupInfo: null\n  };\n\n  _onViewportChange = viewport => this.setState({ viewport });\n\n  markerClick = info => {\n    this.setState({ popupInfo: info });\n  };\n\n  _renderMarker = (point, index) => {\n    return (\n      <Marker\n        key={point.id}\n        latitude={point.coordinates[0]}\n        longitude={point.coordinates[1]}\n      >\n        <MarkerComponent\n          size={20}\n          positive={point.positive}\n          onClick={() => this.markerClick(point)}\n        />\n      </Marker>\n    );\n  };\n\n  _renderPopup() {\n    const { popupInfo } = this.state;\n\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          latitude={popupInfo.coordinates[0]}\n          longitude={popupInfo.coordinates[1]}\n          closeOnClick={true}\n          onClose={() => this.setState({ popupInfo: null })}\n        >\n          <PointInfo info={popupInfo} />\n        </Popup>\n      )\n    );\n  }\n\n  render() {\n    return (\n      <ReactMapGL\n        mapboxApiAccessToken=\"pk.eyJ1Ijoicm9tYW5ib3JvZGF0b3YiLCJhIjoiY2sxa2w3N3Y1MDdvZjNibzNveXFidWpuaSJ9.h9858JVC3HbU02hxED68eg\"\n        {...this.state.viewport}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={this._onViewportChange}\n      >\n        {this.props.points.map(point => this._renderMarker(point))}\n\n        {this._renderPopup()}\n      </ReactMapGL>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./index.css\";\n\nexport default class ReportIssue extends Component {\n  render() {\n    return (\n      <div\n        className={`reportButton ${this.props.position}`}\n        onClick={this.props.clickHandler}\n        style={{ backgroundColor: this.props.color }}\n      >\n        <span>+</span>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\n\nimport \"./index.css\";\n\nconst customStyles = {\n  container: (provided, state) => ({\n    ...provided,\n    width: \"100%\"\n  })\n};\n\nexport default class Report extends Component {\n  state = {\n    selectedProblemValue: null,\n    error: \"\",\n    locating: false\n  };\n\n  handleSelect = select => {\n    this.setState({\n      selectedProblemValue: select.value\n    });\n  };\n\n  error = () => {\n    this.setState({\n      error: \"Unable to retrieve your location\"\n    });\n  };\n\n  success = position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    const problem = this.state.selectedProblemValue;\n\n    const userId =\n      localStorage.getItem(\"userId\") &&\n      localStorage.getItem(\"userId\") !== undefined\n        ? localStorage.getItem(\"userId\")\n        : null;\n\n    fetch(\"https://neolabs-api.zpoken.ai/problems\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        userId\n      },\n      body: JSON.stringify({\n        lng: longitude,\n        lat: latitude,\n        type: parseInt(problem)\n      })\n    })\n      .then(res => res.json())\n      .then(res => {\n        localStorage.setItem(\"userId\", res.userId);\n        this.setState({\n          locating: false\n        });\n        this.props.getMapPoints();\n        this.props.handleClose();\n      });\n  };\n\n  handleSubmit = () => {\n    if (!navigator.geolocation) {\n      this.setState({\n        error: \"Geolocation is not supported by your browser\"\n      });\n    } else {\n      this.setState({\n        locating: true\n      });\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n  };\n\n  getOptions = () => {\n    const options = this.props.options.map(option => {\n      return {\n        value: option.id,\n        label: option.text\n      };\n    });\n    return options;\n  };\n\n  render() {\n    return (\n      <div className={`report ${this.props.active ? \"active\" : \"\"}`}>\n        <div className=\"close-button\" onClick={this.props.handleClose}>\n          <span>x</span>\n        </div>\n        <Select\n          styles={customStyles}\n          options={this.getOptions()}\n          onChange={this.handleSelect}\n        />\n        <button\n          className=\"button\"\n          onClick={this.handleSubmit}\n          disabled={!this.state.selectedProblemValue}\n        >\n          <span>Отправить</span>\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Map from \"./components/Map\";\nimport ReportIssue from \"./components/ReportIssue\";\nimport Report from \"./components/Report\";\nimport Immutable, { fromJS } from \"immutable\";\n\nimport \"./App.css\";\n\nconst mapStyle = fromJS({\n  version: 8,\n  sources: {\n    points: {\n      type: \"geojson\",\n      data: {\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            geometry: { type: \"Point\", coordinates: [-122.45, 37.78] }\n          }\n        ]\n      }\n    }\n  },\n  layers: [\n    {\n      id: \"my-layer\",\n      type: \"circle\",\n      source: \"points\",\n      paint: {\n        \"circle-color\": \"#f00\",\n        \"circle-radius\": 4\n      }\n    }\n  ]\n});\n\nexport default class App extends Component {\n  state = {\n    reportOpened: false,\n    problemOptions: [],\n    positiveOptions: [],\n    loadingPoints: true,\n    points: [],\n    reportProblem: \"bad\"\n  };\n\n  componentDidMount() {\n    this.getMapPoints();\n    this.getProblemTypes();\n  }\n\n  getProblemTypes = () => {\n    fetch(\"https://neolabs-api.zpoken.ai/problems/types\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        const problemOptions = res.filter(item => item.positive === false);\n        const positiveOptions = res.filter(item => item.positive === true);\n        this.setState({\n          problemOptions: problemOptions,\n          positiveOptions: positiveOptions\n        });\n      });\n  };\n\n  getMapPoints = () => {\n    fetch(\"https://neolabs-api.zpoken.ai/problems\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(res => {\n        // const locations = Immutable.fromJS(res);\n        this.setState({\n          points: res,\n          loadingPoints: false\n        });\n      });\n  };\n\n  toggleReport = type => {\n    console.log(\"togle\");\n    this.setState({\n      reportOpened: !this.state.reportOpened,\n      reportProblem: type\n    });\n  };\n\n  render() {\n    return this.state.loadingPoints ? null : (\n      <div className=\"App\">\n        <Map points={this.state.points} mapStyle={mapStyle} />\n        <ReportIssue\n          clickHandler={() => this.toggleReport(\"good\")}\n          color=\"green\"\n          position=\"left\"\n        />\n        <ReportIssue\n          clickHandler={() => this.toggleReport(\"bad\")}\n          color=\"#ff9800\"\n          position=\"right\"\n        />\n        {this.state.reportProblem === \"bad\" ? (\n          <Report\n            active={this.state.reportOpened}\n            options={this.state.problemOptions}\n            handleClose={this.toggleReport}\n            getMapPoints={this.getMapPoints}\n          />\n        ) : (\n          <Report\n            active={this.state.reportOpened}\n            options={this.state.positiveOptions}\n            handleClose={this.toggleReport}\n            getMapPoints={this.getMapPoints}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}